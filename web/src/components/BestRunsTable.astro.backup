---
import type { BestRun } from "../lib/types";
import { formatDurationMMSS } from "../lib/utils.ts";
import { formatRankingWithBracket } from "../lib/ranking-utils.ts";

export interface Props {
  bestRuns: Record<string, BestRun>;
  mode?: "full" | "compact";
  class?: string;
}

const { bestRuns, mode = "full", class: className } = Astro.props;

const runsArray = Object.values(bestRuns || {});
const hasRuns = runsArray.length > 0;

---

{
  hasRuns ? (
    <div class={`best-runs-table ${className || ""}`.trim()} data-mode={mode}>
      <div class="best-runs-header">
        <div class="header-cell header-cell--dungeon">Dungeon</div>
        <div class="header-cell header-cell--time">Time</div>
        {mode === "full" && (
          <div class="header-cell header-cell--team">Team</div>
        )}
        <div class="header-cell header-cell--rank">Global</div>
        {mode === "full" && (
          <div class="header-cell header-cell--rank">Region</div>
        )}
        {mode === "full" && (
          <div class="header-cell header-cell--rank">Realm</div>
        )}
      </div>

      <div class="best-runs-body">
        {runsArray.map((run) => {
          const duration = formatDurationMMSS(run.duration);

          return (
            <div class="best-runs-row">
              <div class="runs-cell runs-cell--dungeon">{run.dungeon_name}</div>
              <div class="runs-cell runs-cell--time">{duration}</div>
              {mode === "full" && (
                <div class="runs-cell runs-cell--team">
                  <div class="team-composition">
                    {run.all_members?.map((member) => (
                      <span class="team-member">
                        <div
                          class="spec-icon-placeholder"
                          data-spec-id={member.spec_id}
                        />
                        <a
                          href={`/player/${member.region}/${member.realm_slug}/${member.name.toLowerCase()}`}
                          class="member-link"
                          data-spec-id={member.spec_id}
                        >
                          {member.name}
                        </a>
                      </span>
                    ))}
                  </div>
                </div>
              )}
              <div
                class="runs-cell runs-cell--rank"
                set:html={formatRankingWithBracket(
                  run.global_ranking,
                  run.percentile_bracket || "",
                )}
              />
              {mode === "full" && (
                <div
                  class="runs-cell runs-cell--rank"
                  set:html={formatRankingWithBracket(
                    run.regional_ranking,
                    run.percentile_bracket || "",
                  )}
                />
              )}
              {mode === "full" && (
                <div
                  class="runs-cell runs-cell--rank"
                  set:html={formatRankingWithBracket(
                    run.realm_ranking,
                    run.percentile_bracket || "",
                  )}
                />
              )}
            </div>
          );
        })}
      </div>
    </div>
  ) : (
    <div class="no-runs-message">
      <p>No best runs found for this player.</p>
    </div>
  )
}

<script>
  import { getClassColor, specMap, specIconMap } from "../lib/client-utils.ts";
  
  // initialize spec icons and class colors when component loads
  function setupBestRunsTable() {
    // setup spec icons
    const iconPlaceholders = document.querySelectorAll(
      ".best-runs-table .spec-icon-placeholder",
    );
    iconPlaceholders.forEach((placeholder) => {
      const specId = parseInt((placeholder as HTMLElement).dataset.specId || "");
      if (specId) {
        const spec = specMap[specId as keyof typeof specMap];
        const iconUrl = spec ? specIconMap[`${spec.class}|${spec.spec}`] : null;

        if (iconUrl) {
          const img = document.createElement("img");
          img.src = iconUrl;
          img.alt = `${spec.spec} ${spec.class}`;
          img.className = "spec-icon";
          placeholder.appendChild(img);
        }
      }
    });

    // setup class colors
    const memberLinks = document.querySelectorAll(
      ".best-runs-table .member-link",
    );
    memberLinks.forEach((link) => {
      const specId = parseInt((link as HTMLElement).dataset.specId || "");
      if (specId) {
        const spec = specMap[specId as keyof typeof specMap];
        const classColor = spec ? getClassColor(spec.class) : "#FFFFFF";
        (link as HTMLElement).style.color = classColor;
      }
    });
  }

  // initialize when DOM is ready
  document.addEventListener("DOMContentLoaded", setupBestRunsTable);

  // re-initialize when new content is dynamically loaded
  document.addEventListener("bestRunsTableLoaded", setupBestRunsTable);
</script>

<style>
  .best-runs-table {
    border-radius: 6px;
    overflow: hidden;
    border: 1px solid #4a4a4a;
  }

  .best-runs-header {
    display: grid;
    padding: 15px 20px;
    background-color: rgba(255, 255, 255, 0.03);
    border-bottom: 1px solid #4a4a4a;
    font-weight: 600;
    color: var(--text-secondary);
    font-size: 0.9em;
    text-transform: uppercase;
    letter-spacing: 0.5px;
  }

  .best-runs-header {
    gap: 15px;
  }

  .header-cell {
    display: flex;
    align-items: center;
  }

  .header-cell--time,
  .header-cell--rank {
    justify-content: center;
  }

  .best-runs-body {
    background-color: rgba(0, 0, 0, 0.2);
  }

  .best-runs-row {
    display: grid;
    gap: 15px;
    align-items: center;
    padding: 15px 20px;
    border-bottom: 1px solid #3a3a3a;
    min-height: 60px;
    transition: background-color 0.2s ease;
  }

  .best-runs-row:hover {
    background-color: rgba(255, 215, 0, 0.05);
  }

  .best-runs-row:last-child {
    border-bottom: none;
  }

  .runs-cell--dungeon {
    color: var(--text-primary);
    font-weight: 600;
  }

  .runs-cell--time {
    font-family: "Courier New", monospace;
    font-weight: bold;
    color: #ffffff;
    text-align: right;
  }

  .runs-cell--rank {
    font-size: 1.1em;
    font-weight: bold;
    color: #d8a657;
    text-align: center;
  }

  .team-composition {
    display: flex;
    flex-wrap: wrap;
    gap: 8px;
    align-items: center;
  }

  .team-member {
    display: inline-flex;
    align-items: center;
    gap: 4px;
  }

  .spec-icon {
    width: 16px;
    height: 16px;
    border-radius: 2px;
    flex-shrink: 0;
    border: 1px solid #444;
  }

  .member-link {
    font-weight: 600;
    font-size: 0.9em;
    text-decoration: none;
    color: #ffffff;
  }

  .member-link:hover {
    text-decoration: underline;
  }

  .no-runs-message {
    text-align: center;
    padding: 40px 20px;
    color: var(--text-muted);
    background-color: var(--bg-secondary);
    border-radius: 6px;
    border: 1px solid var(--border-color);
  }

  .no-runs-message p {
    margin: 0;
  }

  /* full mode grid layout */
  .best-runs-table[data-mode="full"] .best-runs-header,
  .best-runs-table[data-mode="full"] .best-runs-row {
    grid-template-columns: 200px 120px 2fr 100px 100px 100px;
  }

  /* compact mode grid layout */
  .best-runs-table[data-mode="compact"] .best-runs-header,
  .best-runs-table[data-mode="compact"] .best-runs-row {
    grid-template-columns: 150px 100px 80px;
  }

  @media (max-width: 768px) {
    .best-runs-table[data-mode="full"] .best-runs-header,
    .best-runs-table[data-mode="full"] .best-runs-row {
      grid-template-columns: 1fr 100px 80px;
    }

    .runs-cell--team {
      display: none;
    }

    .header-cell--team {
      display: none;
    }
  }
</style>
