---
export interface Props {
  message?: string;
  type?: 'loading' | 'error';
  class?: string;
}

const { message, type = 'loading', class: className } = Astro.props;
---

<div class={`loading-state ${type} ${className || ''}`.trim()}>
  {type === 'loading' && (
    <div class="loading-spinner"></div>
  )}
  <p class="loading-message">{message || (type === 'error' ? 'An error occurred' : 'Loading...')}</p>
</div>

<style>
  .loading-state {
    text-align: center;
    padding: 40px 20px;
    margin: 20px 0;
    background-color: var(--bg-secondary);
    border-radius: 8px;
    border: 1px solid var(--border-color);
    display: flex;
    flex-direction: column;
    align-items: center;
    gap: 15px;
  }

  .loading-state.loading {
    color: var(--text-muted);
  }

  .loading-state.error {
    color: #ff6666;
    border-color: #ff4444;
    background-color: rgba(255, 0, 0, 0.1);
  }

  .loading-spinner {
    width: 24px;
    height: 24px;
    border: 2px solid var(--border-color);
    border-top: 2px solid var(--highlight-color);
    border-radius: 50%;
    animation: spin 1s linear infinite;
  }

  .loading-message {
    margin: 0;
    font-size: 1em;
  }

  .hidden {
    display: none;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }
</style>