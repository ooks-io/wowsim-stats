---
import ChallengeModeLayout from "../../layouts/ChallengeModeLayout.astro";
import { DATA_MAP } from "../../data/realms.js";

export async function getStaticPaths() {

  const dungeonNames = {
    "2": "Temple of the Jade Serpent",
    "56": "Stormstout Brewery", 
    "57": "Gate of the Setting Sun",
    "58": "Shado-Pan Monastery",
    "59": "Siege of Niuzao Temple",
    "60": "Mogu'shan Palace",
    "76": "Scholomance",
    "77": "Scarlet Halls",
    "78": "Scarlet Monastery",
  };

  const paths = [];

  // 1. Generate individual realm combinations
  for (const [regionKey, regionData] of Object.entries(DATA_MAP)) {
    for (const realmKey of Object.keys(regionData.realms)) {
      for (const [dungeonId, dungeonName] of Object.entries(dungeonNames)) {
        const dungeonSlug = dungeonName.toLowerCase().replace(/[^a-z0-9]/g, '-');
        paths.push({
          params: { 
            slug: `${regionKey}/${realmKey}/${dungeonSlug}` 
          },
          props: {
            initialRegion: regionKey,
            initialRealm: realmKey,
            initialDungeon: dungeonId
          }
        });
      }
    }
  }

  // 2. Generate regional "all realms" combinations  
  for (const [regionKey, regionData] of Object.entries(DATA_MAP)) {
    for (const [dungeonId, dungeonName] of Object.entries(dungeonNames)) {
      const dungeonSlug = dungeonName.toLowerCase().replace(/[^a-z0-9]/g, '-');
      paths.push({
        params: { 
          slug: `${regionKey}/all/${dungeonSlug}` 
        },
        props: {
          initialRegion: regionKey,
          initialRealm: "all",
          initialDungeon: dungeonId
        }
      });
    }
  }

  // 3. Generate global combinations
  for (const [dungeonId, dungeonName] of Object.entries(dungeonNames)) {
    const dungeonSlug = dungeonName.toLowerCase().replace(/[^a-z0-9]/g, '-');
    paths.push({
      params: { 
        slug: `global/${dungeonSlug}` 
      },
      props: {
        initialRegion: "global",
        initialRealm: "global",
        initialDungeon: dungeonId
      }
    });
  }

  return paths;
}

// Get initial values from props passed by getStaticPaths
const { initialRegion, initialRealm, initialDungeon } = Astro.props;
console.log('Initial values from props:', { initialRegion, initialRealm, initialDungeon });
---

<ChallengeModeLayout 
  initialRegion={initialRegion}
  initialRealm={initialRealm}
  initialDungeon={initialDungeon}
/>