---
// main layout for all challenge mode leaderboards
import PageLayout from "../components/PageLayout.astro";
import FilterPanel from "../components/islands/FilterPanel.astro";
import LeaderboardTable from "../components/islands/LeaderboardTable.astro";
import { getDungeonName } from "../lib/wow-constants.ts";
import { buildStaticLeaderboardPath } from "../lib/utils.ts";
import PlayerLeaderboard from "../components/islands/PlayerLeaderboard.astro";
import "../styles/components.scss";

export interface Props {
  initialLeaderboardType?: string;
  initialRegion?: string;
  initialRealm?: string;
  initialDungeon?: string;
}

const {
  initialLeaderboardType = "dungeon",
  initialRegion = "global",
  initialRealm = "",
  initialDungeon = "2",
} = Astro.props;

// Don't load initial data - let the user make selections first
let initialData: any = undefined;
let pageTitle = "Challenge Mode Leaderboards";
let dungeonName = "";

// Only load initial data if we have meaningful URL parameters
if (
  initialLeaderboardType === "dungeon" &&
  initialRegion &&
  initialRegion !== "global" &&
  initialRealm &&
  initialDungeon &&
  initialDungeon !== "2"
) {
  try {
    dungeonName = getDungeonName(parseInt(initialDungeon));
    pageTitle = `${dungeonName} - ${initialRegion === "global" ? "Global" : initialRegion.toUpperCase()} Leaderboard`;

    // Load initial leaderboard data from static files
    const staticPath = buildStaticLeaderboardPath(
      initialRegion,
      initialRealm || "all",
      parseInt(initialDungeon),
      1,
    );
    const origin = Astro.url?.origin || Astro.site || "";
    console.log(`[Leaderboard] Fetching: ${origin}${staticPath}`);
    console.log(`[Leaderboard] Origin: ${origin}`);
    console.log(`[Leaderboard] Static path: ${staticPath}`);

    const response = await fetch(`${origin}${staticPath}`);
    console.log(`[Leaderboard] Response status: ${response.status}`);

    if (response.ok) {
      initialData = await response.json();
      console.log(`[Leaderboard] Data loaded successfully`);
    } else {
      console.warn(
        `[Leaderboard] Static leaderboard file not found (${response.status}):`,
        staticPath,
      );
      initialData = undefined;
    }
  } catch (error) {
    console.error("Failed to load initial leaderboard data:", error);
    initialData = undefined;
  }
}
---

<PageLayout
  title={pageTitle}
  description={`Challenge Mode leaderboards for ${dungeonName || "MoP Classic dungeons"}`}
  pageTitle={pageTitle}
>
  <div class="challenge-mode-layout">
    <!-- Header Section -->
    <header class="challenge-header">
      <div class="header-content">
        <h1 class="page-title">Challenge Mode Leaderboards</h1>
        <p class="page-subtitle">
          Compete for the fastest dungeon clear times in Mists of Pandaria
          Classic
        </p>
      </div>
    </header>

    <!-- Navigation Tabs -->
    <nav class="leaderboard-nav">
      <div class="nav-tabs">
        <button
          class={`nav-tab ${initialLeaderboardType === "dungeon" ? "active" : ""}`}
          data-type="dungeon"
        >
          Dungeons
        </button>
        <button
          class={`nav-tab ${initialLeaderboardType === "players" ? "active" : ""}`}
          data-type="players"
        >
          Players
        </button>
      </div>
    </nav>

    <!-- Main Content -->
    <main class="challenge-content">
      <!-- Dungeon Leaderboard Section -->
      <section
        id="dungeon-section"
        class={`content-section ${initialLeaderboardType === "dungeon" ? "active" : "hidden"}`}
      >
        <div class="section-header">
          <h2>Dungeon Leaderboards</h2>
        </div>

        <FilterPanel
          initialRegion={initialRegion}
          initialRealm={initialRealm}
          initialDungeon={initialDungeon}
        />

        <LeaderboardTable
          initialData={initialData}
          region={initialRegion}
          realm={initialRealm || ""}
          dungeon={initialDungeon}
          dungeonName={dungeonName}
        />
      </section>

      <!-- Player Rankings Section -->
      <section
        id="players-section"
        class={`content-section ${initialLeaderboardType === "players" ? "active" : "hidden"}`}
      >
        <div class="section-header">
          <h2>Player Rankings</h2>
        </div>

        <!-- Player leaderboard re-enabled -->
        <div class="player-leaderboard-wrapper">
          <PlayerLeaderboard />
        </div>
      </section>
    </main>
  </div>

  <script type="module">
    // Tab switching functionality
    class LeaderboardTabs {
      constructor() {
        console.log("🎛️ LeaderboardTabs initialized");
        this.bindEvents();
        this.updateActiveSection();
        this.setupPopstateHandler();
      }

      bindEvents() {
        const navTabs = document.querySelectorAll(".nav-tab");
        console.log("🔗 Binding tab events to", navTabs.length, "tabs");

        navTabs.forEach((tab) => {
          tab.addEventListener("click", (e) => {
            const button = e.target;
            const type =
              button && button.dataset ? button.dataset.type : undefined;
            console.log("🖱️ Tab clicked:", type);
            if (type) {
              this.switchTab(type);
            }
          });
        });
      }

      switchTab(type, updateHistory = true) {
        console.log(
          "🔄 Switching to tab:",
          type,
          "updateHistory:",
          updateHistory,
        );

        // Update active tab
        document.querySelectorAll(".nav-tab").forEach((tab) => {
          const htmlTab = tab;
          const t =
            htmlTab && htmlTab.dataset ? htmlTab.dataset.type : undefined;
          htmlTab.classList.toggle("active", t === type);
        });

        // Update active section
        document.querySelectorAll(".content-section").forEach((section) => {
          const el = section;
          if (el.id === `${type}-section`) {
            el.classList.remove("hidden");
            el.classList.add("active");
            console.log("✅ Showing section:", section.id);
          } else {
            el.classList.add("hidden");
            el.classList.remove("active");
            console.log("🙈 Hiding section:", section.id);
          }
        });

        // Update URL only if not responding to browser navigation
        if (updateHistory) {
          if (type === "players") {
            // Always update to players URL when switching to players tab
            const newURL = "/challenge-mode/players";
            console.log("🔗 Updating URL to players:", newURL);
            window.history.pushState({}, "", newURL);
          } else if (type === "dungeon") {
            // For dungeon tab, only update if we're on a generic URL
            const currentPath = window.location.pathname;
            if (currentPath === "/challenge-mode/players") {
              // Coming from players tab, go to generic dungeon URL
              const newURL = "/challenge-mode";
              console.log("🔗 Updating URL from players to dungeon:", newURL);
              window.history.pushState({}, "", newURL);
            } else {
              // Preserve specific dungeon URLs (e.g., /challenge-mode/us/arugal/scarlet-monastery)
              console.log("🔒 Preserving specific dungeon URL:", currentPath);
            }
          }
        } else {
          console.log(
            "📍 Not updating history - responding to browser navigation",
          );
        }

        // Load content if needed
        this.loadSectionContent(type);
      }

      updateActiveSection(fromPopstate = false) {
        const path = window.location.pathname;
        console.log("📍 Current path:", path, "fromPopstate:", fromPopstate);

        if (path.includes("/players")) {
          console.log("🎯 Activating players tab from URL");
          this.switchTab("players", !fromPopstate);
        } else {
          console.log("🎯 Activating dungeon tab from URL");
          this.switchTab("dungeon", !fromPopstate);
        }
      }

      setupPopstateHandler() {
        window.addEventListener("popstate", () => {
          console.log(
            "🔙 LeaderboardTabs popstate event - URL changed to:",
            window.location.href,
          );
          this.updateActiveSection(true);
        });
      }

      async loadSectionContent(type) {
        console.log("📝 Loading section content for:", type);

        if (type === "players") {
          // Notify PlayerLeaderboard component that it's now visible
          console.log("👀 PlayerLeaderboard section is now visible");

          const tryRefresh = () => {
            const pl = window && window["playerLeaderboard"];
            if (pl && typeof pl.refreshCurrentPage === "function") {
              console.log("🔄 Refreshing PlayerLeaderboard after tab switch");
              pl.refreshCurrentPage();
              return true;
            }
            return false;
          };

          // Attempt immediately; if not ready, try to kick init and wait for ready event
          if (!tryRefresh()) {
            console.warn(
              "⚠️ PlayerLeaderboard not ready, waiting for event...",
            );
            try {
              const maybeInit = window["__initPlayerLeaderboard"];
              if (typeof maybeInit === "function") {
                console.log("🛠️ Invoking __initPlayerLeaderboard()");
                maybeInit();
              }
            } catch {}
            const onReady = () => {
              window.removeEventListener("playerLeaderboard:ready", onReady);
              tryRefresh();
            };
            window.addEventListener("playerLeaderboard:ready", onReady, {
              once: true,
            });
          }
        }
      }
    }

    // Initialize when DOM is ready
    document.addEventListener("DOMContentLoaded", () => {
      new LeaderboardTabs();
    });
  </script>

  <!-- Ensure Player Leaderboard client module is loaded regardless of tab timing -->
  <script src="../client/player-leaderboard.ts"></script>
  <script type="module">
    console.log(
      "[ModernChallengeLayout] player-leaderboard module import requested",
    );
  </script>

  <style>
    .challenge-mode-layout {
      max-width: 1200px;
      margin: 0 auto;
      padding: 20px;
    }

    .challenge-header {
      margin-bottom: 30px;
      padding: 30px 0;
      border-bottom: 1px solid var(--border-color);
    }

    .header-content h1 {
      color: var(--highlight-color);
      font-size: 2.5em;
      margin: 0 0 10px 0;
      font-weight: 700;
    }

    .page-subtitle {
      color: var(--text-secondary);
      font-size: 1.1em;
      margin: 0;
      line-height: 1.5;
    }

    .leaderboard-nav {
      margin-bottom: 30px;
    }

    .nav-tabs {
      display: flex;
      gap: 2px;
      background-color: var(--bg-primary);
      border-radius: 8px;
      padding: 4px;
      border: 1px solid var(--border-color);
    }

    .nav-tab {
      flex: 1;
      padding: 12px 20px;
      background: none;
      border: none;
      color: var(--text-secondary);
      font-weight: 500;
      border-radius: 6px;
      cursor: pointer;
      transition: all 0.2s ease;
      text-align: center;
    }

    .nav-tab:hover {
      color: var(--text-primary);
      background-color: var(--bg-hover);
    }

    .nav-tab.active {
      background-color: var(--highlight-color);
      color: #000;
      font-weight: 600;
    }

    .challenge-content {
      min-height: 400px;
    }

    .content-section {
      animation: fadeIn 0.3s ease;
    }

    .content-section.hidden {
      display: none;
    }

    .section-header {
      margin-bottom: 25px;
    }

    .section-header h2 {
      color: var(--text-primary);
      font-size: 1.8em;
      margin: 0 0 8px 0;
    }

    .section-header p {
      color: var(--text-muted);
      margin: 0;
      font-size: 0.95em;
    }

    .error-message,
    .info-message {
      text-align: center;
      padding: 40px;
      color: var(--text-muted);
      background-color: var(--bg-secondary);
      border-radius: 8px;
      border: 1px solid var(--border-color);
    }

    @keyframes fadeIn {
      from {
        opacity: 0;
        transform: translateY(10px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }

    @media (max-width: 768px) {
      .challenge-mode-layout {
        padding: 15px;
      }

      .challenge-header {
        text-align: center;
      }

      .header-content h1 {
        font-size: 2em;
      }

      .nav-tabs {
        flex-direction: column;
      }
    }
  </style>
</PageLayout>
