---
import Navigation from '../components/Navigation.astro';
import Warning from '../components/Warning.astro';

export interface Props {
  title: string;
  description?: string;
}

const { title, description } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="viewport" content="width=device-width" />
    <title>{title} - WoW MoP Rankings</title>
    <link rel="stylesheet" href="/src/styles/global.css" />
    <style>
      body {
        font-family: Arial, sans-serif;
        margin: 0;
        padding: 0;
        background-color: var(--bg-primary);
        color: var(--text-primary);
      }
      
      .page-header {
        text-align: center;
        padding: 30px 20px;
        background-color: var(--bg-secondary);
        border-bottom: 1px solid var(--border-color);
      }
      
      .page-title {
        color: var(--highlight-color);
        margin: 0 0 10px 0;
        font-size: 2.5em;
        font-weight: 700;
      }
      
      .page-description {
        color: var(--text-secondary);
        font-size: 1.1em;
        margin: 0;
      }

      .rankings-container {
        max-width: 1200px;
        margin: 0 auto;
        padding: 20px;
      }
      
      .controls {
        margin-bottom: 30px;
        padding: 20px;
        background-color: var(--bg-secondary);
        border-radius: 8px;
        border: 1px solid var(--border-color);
      }
      
      .controls-title {
        color: var(--highlight-color);
        margin: 0 0 15px 0;
        font-size: 1.2em;
        font-weight: 600;
      }
      
      .controls-grid {
        display: flex;
        gap: 20px;
        flex-wrap: wrap;
      }
      
      .control-group {
        display: flex;
        flex-direction: column;
        gap: 5px;
      }
      
      .control-group label {
        font-size: 0.9em;
        color: var(--text-muted);
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }
      
      .control-group select {
        padding: 8px 12px;
        background-color: #2a2a2a;
        border: 1px solid #555;
        border-radius: 4px;
        color: var(--text-primary);
        font-size: 0.9em;
        min-width: 120px;
      }
      
      .control-group select:focus {
        outline: none;
        border-color: var(--highlight-color);
      }
      
      .loading, .error {
        text-align: center;
        padding: 20px;
        margin: 20px 0;
        position: fixed;
        top: 50%;
        left: 50%;
        transform: translate(-50%, -50%);
        background-color: #2a2a2a;
        border-radius: 8px;
        z-index: 1000;
        min-width: 200px;
      }
      
      .loading {
        color: var(--text-muted);
        border: 1px solid var(--border-color);
      }
      
      .error {
        color: var(--highlight-color);
        background-color: #3a2a2a;
        border: 1px solid var(--highlight-color);
      }
      
      #metadata-container {
        min-height: 120px;
        transition: opacity 0.2s ease;
      }
      
      #chart-container {
        min-height: 400px;
        transition: opacity 0.2s ease;
      }
      
      .hidden {
        display: none;
      }
    </style>
    <style is:global>
      .simulation-metadata {
        background-color: var(--bg-secondary);
        border-radius: 8px;
        padding: 20px;
        margin-bottom: 30px;
        border: 1px solid var(--border-color);
      }
      
      .metadata-title {
        color: var(--highlight-color);
        margin: 0 0 15px 0;
        font-size: 1.2em;
        font-weight: 600;
      }
      
      .metadata-grid {
        display: grid;
        grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
        gap: 15px;
      }
      
      .metadata-item {
        display: flex;
        flex-direction: column;
        gap: 4px;
      }
      
      .metadata-item-wide {
        grid-column: 1 / -1;
      }
      
      .metadata-label {
        font-size: 0.85em;
        color: var(--text-muted);
        font-weight: 500;
        text-transform: uppercase;
        letter-spacing: 0.5px;
      }
      
      .metadata-value {
        font-size: 1em;
        color: var(--text-primary);
        font-weight: 600;
      }
      
      .metadata-value-wrap {
        white-space: normal;
        word-wrap: break-word;
        line-height: 1.4;
      }

      .chart-container {
        background-color: var(--bg-secondary);
        border-radius: 8px;
        padding: 20px;
        border: 1px solid var(--border-color);
      }
      
      .chart-title {
        color: var(--highlight-color);
        margin: 0 0 20px 0;
        font-size: 1.4em;
        font-weight: 600;
      }
      
      .chart-bars {
        display: flex;
        flex-direction: column;
        gap: 8px;
      }
      
      .chart-item {
        display: grid;
        grid-template-columns: 180px 1fr;
        align-items: center;
        gap: 15px;
        padding: 8px 0;
      }
      
      .chart-labels {
        display: flex;
        align-items: center;
        gap: 10px;
        min-width: 120px;
        max-width: 180px;
        flex-shrink: 0;
        overflow: hidden;
      }
      
      .chart-rank {
        font-size: 0.9em;
        color: var(--text-muted);
        font-weight: 600;
        min-width: 30px;
      }
      
      .chart-label {
        font-weight: 600;
        color: var(--text-primary);
        text-transform: capitalize;
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;
        flex: 1;
      }
      
      .chart-bar-container {
        display: flex;
        align-items: center;
        flex: 1;
        gap: 10px;
        min-width: 0;
      }
      
      .chart-bar {
        height: 20px;
        border-radius: 3px;
        min-width: 2px;
        transition: width 0.3s ease;
      }
      
      .chart-value {
        font-weight: 600;
        color: var(--text-primary);
        font-size: 0.9em;
        min-width: 60px;
        text-align: right;
      }
    </style>
  </head>
  <body>
    <Navigation />
    <div class="page-header">
      <h1 class="page-title">{title}</h1>
      {description && <p class="page-description">{description}</p>}
    </div>
    
    <div class="rankings-container">
      <Warning title="Comparison Results">
        <p>These rankings compare performance within the selected specialization using static simulation results. All comparisons use identical encounter settings and configurations.</p>
        <p>For live, interactive simulations visit <a href="https://wowsims.com/mop" target="_blank" rel="noopener noreferrer">wowsims.com/mop</a>.</p>
      </Warning>
      
      <div id="metadata-container"></div>
      
      <div class="controls">
        <h3 class="controls-title">Comparison Options</h3>
        <div class="controls-grid">
          <div class="control-group">
            <label for="comparisonType">Compare:</label>
            <select id="comparisonType">
              <option value="race">Races</option>
              <option value="trinket" disabled>Trinkets (Coming Soon)</option>
            </select>
          </div>
          
          <div class="control-group">
            <label for="class">Class:</label>
            <select id="class">
              <option value="">Select Class</option>
              <option value="death_knight">Death Knight</option>
              <option value="druid">Druid</option>
              <option value="hunter">Hunter</option>
              <option value="mage">Mage</option>
              <option value="monk">Monk</option>
              <option value="paladin">Paladin</option>
              <option value="priest">Priest</option>
              <option value="rogue">Rogue</option>
              <option value="shaman">Shaman</option>
              <option value="warlock">Warlock</option>
              <option value="warrior">Warrior</option>
            </select>
          </div>
          
          <div class="control-group">
            <label for="spec">Specialization:</label>
            <select id="spec" disabled>
              <option value="">Select Class First</option>
            </select>
          </div>
          
          <div class="control-group">
            <label for="targetCount">Target Count:</label>
            <select id="targetCount">
              <option value="single">Single Target</option>
              <option value="three">3 Targets</option>
              <option value="cleave">Cleave (2)</option>
              <option value="ten">10 Targets</option>
            </select>
          </div>
          
          <div class="control-group">
            <label for="encounterType">Encounter:</label>
            <select id="encounterType">
              <option value="raid">Raid</option>
            </select>
          </div>
          
          <div class="control-group">
            <label for="duration">Duration:</label>
            <select id="duration">
              <option value="long">Long (5 min)</option>
              <option value="short">Short (2 min)</option>
              <option value="burst">Burst (30s)</option>
            </select>
          </div>
          
          <div class="control-group">
            <label for="phase">Phase:</label>
            <select id="phase">
              <option value="p1">Phase 1</option>
            </select>
          </div>
          
          <div class="control-group">
            <label for="sortBy">Sort By:</label>
            <select id="sortBy">
              <option value="dps">Average DPS</option>
              <option value="max">Max DPS</option>
              <option value="min">Min DPS</option>
              <option value="stdev">Consistency (Low StdDev)</option>
            </select>
          </div>
        </div>
      </div>

      <div id="loading" class="loading hidden">Loading comparison data...</div>
      <div id="error" class="error hidden"></div>
      
      <div id="chart-container"></div>
    </div>

    <script is:inline type="text/javascript">
console.log('Comparison script loaded!');

// Spec options for each class
const classSpecs = {
  death_knight: [
    { value: 'frost', label: 'Frost' },
    { value: 'unholy', label: 'Unholy' }
  ],
  druid: [
    { value: 'balance', label: 'Balance' },
    { value: 'feral', label: 'Feral' }
  ],
  hunter: [
    { value: 'beast_mastery', label: 'Beast Mastery' },
    { value: 'marksmanship', label: 'Marksmanship' },
    { value: 'survival', label: 'Survival' }
  ],
  mage: [
    { value: 'arcane', label: 'Arcane' },
    { value: 'fire', label: 'Fire' },
    { value: 'frost', label: 'Frost' }
  ],
  monk: [
    { value: 'windwalker', label: 'Windwalker' }
  ],
  paladin: [
    { value: 'retribution', label: 'Retribution' }
  ],
  priest: [
    { value: 'shadow', label: 'Shadow' }
  ],
  rogue: [
    { value: 'assassination', label: 'Assassination' },
    { value: 'combat', label: 'Combat' },
    { value: 'subtlety', label: 'Subtlety' }
  ],
  shaman: [
    { value: 'elemental', label: 'Elemental' },
    { value: 'enhancement', label: 'Enhancement' }
  ],
  warlock: [
    { value: 'affliction', label: 'Affliction' },
    { value: 'demonology', label: 'Demonology' },
    { value: 'destruction', label: 'Destruction' }
  ],
  warrior: [
    { value: 'arms', label: 'Arms' },
    { value: 'fury', label: 'Fury' }
  ]
};

// Colors for races/trinkets
const itemColors = {
  // Race colors
  human: '#3FC7EB',
  orc: '#C41E3A', 
  dwarf: '#FF7C0A',
  night_elf: '#A330C9',
  undead: '#00FF98',
  tauren: '#8788EE',
  gnome: '#F48CBA',
  troll: '#FFF468',
  blood_elf: '#0070DD',
  draenei: '#C69B6D',
  goblin: '#AAD372',
  worgen: '#FFFFFF',
  pandaren: '#00FF98',
  // Default trinket colors (will be expanded later)
  trinket: '#ea6962'
};

class ComparisonRankings {
  constructor() {
    this.currentData = null;
    this.bindEvents();
    this.updateSpecOptions();
  }

  bindEvents() {
    // Class change updates spec options
    document.getElementById('class').addEventListener('change', () => {
      this.updateSpecOptions();
      this.clearData();
    });
    
    // Data loading triggers
    const dataSelects = document.querySelectorAll('#spec, #targetCount, #encounterType, #duration, #phase, #comparisonType');
    dataSelects.forEach(select => {
      select.addEventListener('change', () => this.loadData());
    });
    
    // Sort by only re-renders chart
    const sortBySelect = document.getElementById('sortBy');
    if (sortBySelect) {
      sortBySelect.addEventListener('change', () => this.renderChart());
    }
  }

  updateSpecOptions() {
    const classSelect = document.getElementById('class');
    const specSelect = document.getElementById('spec');
    const selectedClass = classSelect.value;
    
    // Clear spec options
    specSelect.innerHTML = '<option value="">Select Specialization</option>';
    
    if (selectedClass && classSpecs[selectedClass]) {
      specSelect.disabled = false;
      classSpecs[selectedClass].forEach(spec => {
        const option = document.createElement('option');
        option.value = spec.value;
        option.textContent = spec.label;
        specSelect.appendChild(option);
      });
    } else {
      specSelect.disabled = true;
    }
  }

  clearData() {
    this.currentData = null;
    document.getElementById('metadata-container').innerHTML = '';
    document.getElementById('chart-container').innerHTML = '';
  }

  getFileName() {
    const comparisonType = document.getElementById('comparisonType').value;
    const targetCount = document.getElementById('targetCount').value;
    const encounterType = document.getElementById('encounterType').value;
    const duration = document.getElementById('duration').value;
    const phase = document.getElementById('phase').value;
    
    return `${comparisonType}_${phase}_${encounterType}_${targetCount}_${duration}.json`;
  }

  async loadData() {
    const className = document.getElementById('class').value;
    const spec = document.getElementById('spec').value;
    
    if (!className || !spec) {
      this.clearData();
      return;
    }

    const loadingEl = document.getElementById('loading');
    const errorEl = document.getElementById('error');
    const metadataContainer = document.getElementById('metadata-container');
    const chartContainer = document.getElementById('chart-container');

    const scrollY = window.scrollY;

    metadataContainer.style.opacity = '0.5';
    chartContainer.style.opacity = '0.5';
    loadingEl.classList.remove('hidden');
    errorEl.classList.add('hidden');

    try {
      const fileName = this.getFileName();
      console.log('Loading:', fileName);
      const response = await fetch(`./data/comparison/${className}/${spec}/${fileName}`);
      
      if (!response.ok) {
        throw new Error(`Failed to load ${fileName}: ${response.statusText}`);
      }

      this.currentData = await response.json();
      console.log('Comparison data loaded successfully');
      
      loadingEl.classList.add('hidden');
      
      this.renderMetadata();
      this.renderChart();
      
      metadataContainer.style.opacity = '1';
      chartContainer.style.opacity = '1';
      
      requestAnimationFrame(() => {
        window.scrollTo(0, scrollY);
      });
      
    } catch (error) {
      console.error('Error loading comparison data:', error);
      loadingEl.classList.add('hidden');
      errorEl.textContent = `Error loading comparison data: ${error.message}`;
      errorEl.classList.remove('hidden');
      
      metadataContainer.innerHTML = '';
      chartContainer.innerHTML = '';
      metadataContainer.style.opacity = '1';
      chartContainer.style.opacity = '1';
    }
  }

  renderMetadata() {
    if (!this.currentData) return;

    const container = document.getElementById('metadata-container');
    const metadata = this.currentData.metadata;
    const comparisonType = document.getElementById('comparisonType').value;
    
    const simulationDate = new Date(metadata.timestamp).toLocaleString('en-US', {
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit',
      timeZoneName: 'short'
    });

    const formatDuration = (seconds) => {
      const minutes = Math.floor(seconds / 60);
      const remainingSeconds = seconds % 60;
      return minutes > 0 ? `${minutes}m ${remainingSeconds}s` : `${remainingSeconds}s`;
    };

    const formatRaidBuffs = (buffs) => {
      const activeBuffs = Object.entries(buffs)
        .filter(([_, value]) => value !== false && value !== 0)
        .map(([key, value]) => {
          const readable = key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase());
          return typeof value === 'number' && value > 1 ? `${readable} (${value})` : readable;
        });
      return activeBuffs.join(', ');
    };

    const itemCount = Object.keys(this.currentData.results).length;
    const comparisonLabel = comparisonType === 'race' ? 'Races' : 'Trinkets';

    container.innerHTML = `
      <div class="simulation-metadata">
        <h3 class="metadata-title">${comparisonLabel} Comparison Details</h3>
        <div class="metadata-grid">
          <div class="metadata-item">
            <span class="metadata-label">Class/Spec</span>
            <span class="metadata-value">${metadata.class} ${metadata.spec}</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Comparison Type</span>
            <span class="metadata-value">${comparisonLabel}</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Iterations</span>
            <span class="metadata-value">${metadata.iterations.toLocaleString()}</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">${comparisonLabel} Tested</span>
            <span class="metadata-value">${itemCount}</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Encounter Duration</span>
            <span class="metadata-value">${formatDuration(metadata.encounterDuration)}</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Duration Variation</span>
            <span class="metadata-value">±${metadata.encounterVariation}s</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Target Count</span>
            <span class="metadata-value">${metadata.targetCount}</span>
          </div>
          <div class="metadata-item">
            <span class="metadata-label">Date Simulated</span>
            <span class="metadata-value">${simulationDate}</span>
          </div>
          <div class="metadata-item metadata-item-wide">
            <span class="metadata-label">Active Raid Buffs</span>
            <span class="metadata-value metadata-value-wrap">${formatRaidBuffs(metadata.raidBuffs)}</span>
          </div>
        </div>
      </div>
    `;
  }

  renderChart() {
    if (!this.currentData) return;

    const container = document.getElementById('chart-container');
    const sortBy = document.getElementById('sortBy').value;
    const comparisonType = document.getElementById('comparisonType').value;

    const chartItems = [];

    for (const [itemName, itemData] of Object.entries(this.currentData.results)) {
      chartItems.push({
        label: itemName.replace(/_/g, ' '),
        dps: itemData.dps,
        max: itemData.max,
        min: itemData.min,
        stdev: itemData.stdev,
        value: itemData[sortBy] || itemData.dps,
        category: itemName
      });
    }

    chartItems.sort((a, b) => {
      return sortBy === 'stdev' ? a.value - b.value : b.value - a.value;
    });

    const maxValue = Math.max(...chartItems.map(item => item.value));
    const softFloorFactor = 0.90;
    const softFloor = maxValue * softFloorFactor;

    const comparisonLabel = comparisonType === 'race' ? 'Race' : 'Trinket';
    const chartTitles = {
      dps: `${comparisonLabel} DPS Rankings (Average)`,
      max: `${comparisonLabel} DPS Rankings (Maximum)`,
      min: `${comparisonLabel} DPS Rankings (Minimum)`,  
      stdev: `${comparisonLabel} DPS Consistency Rankings (Low StdDev = More Consistent)`
    };

    container.innerHTML = `
      <div class="chart-container">
        <h2 class="chart-title">${chartTitles[sortBy] || `${comparisonLabel} DPS Rankings`}</h2>
        <div class="chart-bars">
          ${chartItems.map((item, index) => {
            const chartRange = maxValue - softFloor;
            const valueRelativeToFloor = Math.max(0, item.value - softFloor);
            let barWidth = chartRange > 0 ? (valueRelativeToFloor / chartRange) * 100 : 100;

            const minWidth = 30; // Minimum % width to avoid tiny bars
            const finalBarWidth = Math.max(minWidth, barWidth);

            const displayValue = Math.round(item.value).toLocaleString();
            const avgDps = Math.round(item.dps).toLocaleString();
            const tooltip = sortBy === 'dps' ? displayValue : `${displayValue} (Avg: ${avgDps})`;

            return `
              <div class="chart-item">
                <div class="chart-labels">
                  <span class="chart-rank">#${index + 1}</span>
                  <span class="chart-label">${item.label}</span>
                </div>
                <div class="chart-bar-container">
                  <div class="chart-bar" style="width: ${finalBarWidth}%; background-color: ${itemColors[item.category] || itemColors.trinket || '#666'};"></div>
                  <span class="chart-value" title="${tooltip}">${displayValue}</span>
                </div>
              </div>
            `;
          }).join('')}
        </div>
      </div>
    `;
  }
}

// Initialize when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
  console.log('DOM loaded, initializing ComparisonRankings...');
  new ComparisonRankings();
});
    </script>
  </body>
</html>
