---
import type { LeaderboardData, ChallengeRun } from "../../lib/types";
import LoadingState from "../LoadingState.astro";
import { formatDurationMMSS, buildPlayerProfileURL } from "../../lib/utils.ts";

export interface Props {
  initialData?: LeaderboardData;
  region: string;
  realm: string;
  dungeon: string;
  dungeonName?: string;
  class?: string;
}

const {
  initialData,
  region,
  realm,
  dungeon,
  dungeonName: _dungeonName = "Unknown Dungeon",
  class: className,
} = Astro.props;

const runs = initialData?.leading_groups || [];
const pagination = initialData?.pagination;
---

<div
  class={`leaderboard-container card-container ${className || ""}`.trim()}
  data-region={region}
  data-realm={realm}
  data-dungeon={dungeon}
>
  <!-- loading State (hidden by default, shown during API calls) -->
  <div id="loading-container" style="display: none;">
    <LoadingState message="Loading leaderboard..." />
  </div>

  <!-- error State (hidden by default) -->
  <div id="error-container" style="display: none;">
    <LoadingState type="error" message="" />
  </div>

  <!-- leaderboard content -->
  <div id="leaderboard-content">
    {
      runs.length > 0 ? (
        <div id="leaderboard-rows" class="leaderboard-table">
          {runs.map((run: ChallengeRun, index: number) => {
            const rank = pagination?.currentPage
              ? (pagination.currentPage - 1) * 25 + index + 1
              : index + 1;
            const duration = formatDurationMMSS(run.duration);
            const timestamp = new Date(
              run.completed_timestamp,
            ).toLocaleDateString();

            return (
              <div class="leaderboard-table-row" data-run-id={run.id}>
                <div class="leaderboard-cell leaderboard-cell--rank">
                  #{rank}
                </div>
                <div class="leaderboard-cell leaderboard-cell--time">
                  {duration}
                </div>
                <div class="leaderboard-cell leaderboard-cell--content">
                  {run.members?.map((member) => (
                    <span style="display: inline-flex; align-items: center; margin-right: 8px; gap: 4px;">
                      <a
                        href={buildPlayerProfileURL(
                          member.region || "us",
                          member.realm_slug,
                          member.name,
                        )}
                        style="color: #FFFFFF; font-weight: 600; font-size: 0.9em; text-decoration: none;"
                      >
                        {member.name}
                      </a>
                    </span>
                  ))}
                </div>
                <div class="leaderboard-cell leaderboard-cell--meta">
                  {timestamp}
                </div>
              </div>
            );
          })}
        </div>
      ) : (
        <div class="empty-state">
          <p>Select a region, realm, and dungeon to view leaderboards.</p>
          <p>Use the filters above to get started.</p>
        </div>
      )
    }
  </div>

  <!-- pagination controls (always present, hidden by default) -->
  <div class="pagination-container" style="display: none;">
    <div class="pagination-info">
      <span></span>
    </div>
    <div class="pagination-buttons">
      <button id="prev-page" class="pagination-btn"> Previous </button>
      <span class="page-info"></span>
      <button id="next-page" class="pagination-btn"> Next </button>
    </div>
  </div>

  <!-- cross-realm note (if applicable) -->
  <div id="cross-realm-note" style="display: none;" class="cross-realm-note">
    <p>
      <span class="warning-icon">*</span> indicates players from other realms. Times
      with 3+ local players represent the true realm record for Feat of Strength
      achievement.
    </p>
  </div>
</div>

<script src="../../client/leaderboard-table.ts"></script>
<!-- <script> -->
<!--   console.debug("[LeaderboardTable.astro] module import requested"); -->
<!-- </script> -->

<style>
  .leaderboard-container {
    overflow: hidden;
    margin-top: 20px;
  }

  #leaderboard-rows {
    display: table;
    width: 100%;
  }

  .empty-state {
    text-align: center;
    padding: 40px 20px;
    color: var(--text-muted);
    background-color: var(--bg-secondary);
    border-radius: 8px;
    border: 1px solid var(--border-color);
  }

  .empty-state p {
    margin: 8px 0;
  }

  .pagination-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 20px;
    padding: 15px;
    background-color: var(--bg-secondary);
    border-radius: 6px;
  }

  .pagination-info {
    color: var(--text-secondary);
    font-size: 0.9em;
  }

  .pagination-buttons {
    display: flex;
    align-items: center;
    gap: 15px;
  }

  .pagination-btn {
    padding: 8px 16px;
    background-color: var(--highlight-color);
    color: #000;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .pagination-btn:hover:not(:disabled) {
    background-color: #e6d55a;
    transform: translateY(-1px);
  }

  .pagination-btn:disabled {
    background-color: #666;
    color: #999;
    cursor: not-allowed;
    transform: none;
  }

  .page-info {
    color: var(--text-primary);
    font-weight: 600;
    min-width: 100px;
    text-align: center;
  }

  .cross-realm-note {
    margin-top: 15px;
    padding: 10px;
    background-color: rgba(255, 107, 107, 0.1);
    border-left: 3px solid #ff6b6b;
    border-radius: 4px;
  }

  .cross-realm-note p {
    margin: 0;
    font-size: 0.85em;
    color: var(--text-secondary);
  }

  .warning-icon {
    color: #ff6b6b;
    font-weight: bold;
  }

  @media (max-width: 768px) {
    .pagination-container {
      flex-direction: column;
      gap: 15px;
      text-align: center;
    }
  }
</style>

<style is:global>
  #leaderboard-rows .leaderboard-row {
    display: table-row !important;
    border-bottom: 1px solid #4a4a4a !important;
    background-color: #32302f;
    transition: background-color 0.2s ease;
  }

  #leaderboard-rows .leaderboard-row:hover {
    background-color: rgba(255, 215, 0, 0.05);
  }
</style>
