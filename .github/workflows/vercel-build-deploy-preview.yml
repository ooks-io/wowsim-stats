name: GitHub Actions Vercel Preview Deployment
env:
  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
on:
  workflow_dispatch:

permissions:
  contents: read
  pages: write
  id-token: write

jobs:
  Deploy-Preview:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Nix
        uses: cachix/install-nix-action@v22

      - name: Authenticate with Blizzard API
        id: blizzard_auth
        run: |
          echo "Authenticating with Blizzard API..."

          # Get OAuth token using client credentials flow
          RESPONSE=$(curl -s -X POST "https://oauth.battle.net/token" \
            -H "Content-Type: application/x-www-form-urlencoded" \
            -d "grant_type=client_credentials" \
            -u "${{ secrets.BLIZZARD_CLIENT_ID }}:${{ secrets.BLIZZARD_CLIENT_SECRET }}")

          # Extract access token from response
          ACCESS_TOKEN=$(echo "$RESPONSE" | jq -r '.access_token')

          if [ "$ACCESS_TOKEN" = "null" ] || [ -z "$ACCESS_TOKEN" ]; then
            echo "Failed to authenticate with Blizzard API - check client credentials"
            exit 1
          fi

          # Mask the token in logs to prevent exposure
          echo "::add-mask::$ACCESS_TOKEN"

          echo "Successfully authenticated with Blizzard API"
          echo "BLIZZARD_API_TOKEN=$ACCESS_TOKEN" >> $GITHUB_ENV

      - name: Build API
        run: |
          nix run . build -- \
            --out web/public \
            --from-scratch \
            --regions us,eu,kr \
            --page-size 25 \
            --shard-size 5000 \
            --concurrency 20

      - name: Install Vercel CLI
        run: npm i -g vercel@canary
      - name: Vercel pull
        run: |
          cd web
          vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}
      - name: Vercel build
        run: |
          cd web
          vercel build --token=${{ secrets.VERCEL_TOKEN }}
      - name: Vercel Deploy
        run: |
          cd web
          vercel deploy --prebuilt --archive=tgz --token=${{ secrets.VERCEL_TOKEN }}
