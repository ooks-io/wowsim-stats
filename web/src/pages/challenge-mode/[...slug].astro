---
import ChallengeModeLayout from "../../layouts/ChallengeModeLayout.astro";
import { DATA_MAP } from "../../data/realms.js";
import { DUNGEON_MAP, dungeonNameToSlug } from "../../scripts/wow-constants.js";

export async function getStaticPaths() {
  const dungeonNames = DUNGEON_MAP;

  const paths = [];

  // 1. Add player and team leaderboard routes
  paths.push({
    params: { slug: "players" },
    props: { initialLeaderboardType: "players" },
  });

  paths.push({
    params: { slug: "teams" },
    props: { initialLeaderboardType: "teams" },
  });

  // 2. Generate individual realm combinations
  for (const [regionKey, regionData] of Object.entries(DATA_MAP)) {
    for (const realmKey of Object.keys(regionData.realms)) {
      for (const [dungeonId, dungeonName] of Object.entries(dungeonNames)) {
        const dungeonSlug = dungeonNameToSlug(dungeonName);
        paths.push({
          params: {
            slug: `${regionKey}/${realmKey}/${dungeonSlug}`,
          },
          props: {
            initialLeaderboardType: "dungeon",
            initialRegion: regionKey,
            initialRealm: realmKey,
            initialDungeon: dungeonId,
          },
        });
      }
    }
  }

  // 3. Generate regional "all realms" combinations
  for (const [regionKey] of Object.entries(DATA_MAP)) {
    for (const [dungeonId, dungeonName] of Object.entries(dungeonNames)) {
      const dungeonSlug = dungeonNameToSlug(dungeonName);
      paths.push({
        params: {
          slug: `${regionKey}/all/${dungeonSlug}`,
        },
        props: {
          initialLeaderboardType: "dungeon",
          initialRegion: regionKey,
          initialRealm: "all",
          initialDungeon: dungeonId,
        },
      });
    }
  }

  // 4. Generate global combinations
  for (const [dungeonId, dungeonName] of Object.entries(dungeonNames)) {
    const dungeonSlug = dungeonName.toLowerCase().replace(/[^a-z0-9]/g, "-");
    paths.push({
      params: {
        slug: `global/${dungeonSlug}`,
      },
      props: {
        initialLeaderboardType: "dungeon",
        initialRegion: "global",
        initialRealm: "global",
        initialDungeon: dungeonId,
      },
    });
  }

  return paths;
}

// Get initial values from props passed by getStaticPaths
const { initialLeaderboardType, initialRegion, initialRealm, initialDungeon } =
  Astro.props;
console.log("Initial values from props:", {
  initialLeaderboardType,
  initialRegion,
  initialRealm,
  initialDungeon,
});
---

<ChallengeModeLayout
  initialLeaderboardType={initialLeaderboardType}
  initialRegion={initialRegion}
  initialRealm={initialRealm}
  initialDungeon={initialDungeon}
/>
