---
import type { PlayerLeaderboardData } from "../../lib/types";
import LoadingState from "../LoadingState.astro";
import { formatDurationMMSS, buildPlayerProfileURL } from "../../lib/utils.ts";
import "../../styles/best-runs.scss";

export interface Props {
  initialData?: PlayerLeaderboardData;
  class?: string;
}

const { initialData, class: className } = Astro.props;

const players = initialData?.leaderboard || [];
const pagination = initialData?.pagination;
---

<div
  class={`leaderboard-container card-container player-leaderboard-container ${className || ""}`.trim()}
>
  <!-- loading State (hidden by default, shown during api calls) -->
  <div id="loading-container" style="display: none;">
    <LoadingState message="Loading player rankings..." />
  </div>

  <!-- error State (hidden by default) -->
  <div id="error-container" style="display: none;">
    <LoadingState type="error" message="" />
  </div>

  <!-- player leaderboard content -->
  <div id="player-leaderboard-content">
    {
      players.length > 0 ? (
        <div id="player-leaderboard-rows" class="leaderboard-table">
          {players.map((player: any, index: number) => {
            const rank = pagination?.currentPage
              ? (pagination.currentPage - 1) * 25 + index + 1
              : index + 1;
            const combinedTime = player.combined_best_time
              ? formatDurationMMSS(player.combined_best_time)
              : "-";

            return (
              // should abstract this
              <div
                class="leaderboard-table-row"
                data-rank={`#${rank}`}
                data-time={combinedTime}
              >
                <div class="leaderboard-cell leaderboard-cell--rank">
                  #{rank}
                </div>
                <div class="leaderboard-cell leaderboard-cell--time">
                  {combinedTime}
                </div>
                <div class="leaderboard-cell leaderboard-cell--spec-icon">
                  <div
                    class="spec-icon-placeholder"
                    data-spec-id={player.main_spec_id || 0}
                  />
                </div>
                <div class="leaderboard-cell leaderboard-cell--content">
                  <a
                    href={buildPlayerProfileURL(
                      player.region,
                      player.realm_slug,
                      player.name,
                    )}
                    class="player-link"
                    data-class={player.class_name}
                    style="font-weight: 600; font-size: 1.0em; text-decoration: none;"
                  >
                    {player.name}
                  </a>
                </div>
                <div class="leaderboard-cell leaderboard-cell--meta">
                  {player.realm_name || player.realm_slug}
                </div>
                <div class="mobile-player-info">
                  <div class="mobile-player-spec">
                    <div
                      class="spec-icon-placeholder"
                      data-spec-id={player.main_spec_id || 0}
                    />
                    <div>
                      <a
                        href={buildPlayerProfileURL(
                          player.region,
                          player.realm_slug,
                          player.name,
                        )}
                        class="player-link mobile-player-name"
                        data-class={player.class_name}
                      >
                        {player.name}
                      </a>
                      <div class="mobile-player-realm">
                        {player.realm_name || player.realm_slug}
                      </div>
                    </div>
                  </div>
                </div>
              </div>
            );
          })}
        </div>
      ) : (
        <div class="empty-state">
          <p>No player rankings available.</p>
        </div>
      )
    }
  </div>

  <!-- pagination controls (always present, hidden by default) -->
  <div class="pagination-container" style="display: none;">
    <div class="pagination-info">
      <span></span>
    </div>
    <div class="pagination-buttons">
      <button id="prev-page" class="pagination-btn"> Previous </button>
      <span class="page-info"></span>
      <button id="next-page" class="pagination-btn"> Next </button>
    </div>
  </div>
</div>
<script src="../../client/player-leaderboard.ts"></script>
<!-- <script type="module"> -->
<!--   console.log("[PlayerLeaderboard.astro] module import requested"); -->
<!--   window.addEventListener( -->
<!--     "playerLeaderboard:ready", -->
<!--     () => { -->
<!--       console.log( -->
<!--         "[PlayerLeaderboard.astro] playerLeaderboard:ready event observed", -->
<!--       ); -->
<!--     }, -->
<!--     { once: true }, -->
<!--   ); -->
<!-- </script> -->

<style>
  .pagination-container {
    display: flex;
    justify-content: space-between;
    align-items: center;
    margin-top: 20px;
    padding: 15px;
    background-color: var(--bg-secondary);
    border-radius: 6px;
  }

  .pagination-info {
    color: var(--text-secondary);
    font-size: 0.9em;
  }

  .pagination-buttons {
    display: flex;
    align-items: center;
    gap: 15px;
  }

  .pagination-btn {
    padding: 8px 16px;
    background-color: var(--highlight-color);
    color: #000;
    border: none;
    border-radius: 4px;
    cursor: pointer;
    font-weight: 600;
    transition: all 0.2s ease;
  }

  .pagination-btn:hover:not(:disabled) {
    background-color: #e6d55a;
    transform: translateY(-1px);
  }

  .pagination-btn:disabled {
    background-color: #666;
    color: #999;
    cursor: not-allowed;
    transform: none;
  }

  .page-info {
    color: var(--text-primary);
    font-weight: 600;
    min-width: 100px;
    text-align: center;
  }

  @media (max-width: 768px) {
    .pagination-container {
      flex-direction: column;
      gap: 15px;
      text-align: center;
    }
  }
</style>
