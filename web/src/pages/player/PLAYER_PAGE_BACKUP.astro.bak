---
import Navigation from "../../components/Navigation.astro";
import LoadingState from "../../components/LoadingState.astro";
import WoWClassColors from "../../components/WoWClassColors.astro";
import PlayerHeader from "../../components/PlayerHeader.astro";
import PlayerEquipment from "../../components/PlayerEquipment.astro";
import BestRunsTable from "../../components/BestRunsTable.astro";
import PlayerSearch from "../../components/islands/PlayerSearch.astro";
import { buildStaticPlayerProfilePath } from "../../lib/utils";
import type { BestRun } from "../../lib/types";
import "../../styles/global.css";

// Enable server-side rendering for dynamic player routes (SPA behavior)
export const prerender = false;

// Parse the slug dynamically for client-side routing (SPA mode)
const slug = Astro.params.slug || "";
const slugParts = slug.split("/");

// For URLs like /player/{region}/{realm}/{name}
const region = slugParts[0] || "";
const realmSlug = slugParts[1] || "";
const playerName = slugParts[2] || "";

console.log(`[PlayerProfile] ALWAYS LOGS - Processing player page: ${slug}`);
console.log(`[PlayerProfile] Parsed: region=${region}, realm=${realmSlug}, player=${playerName}`);

// Server-side data fetching
let player: any | null = null;
let equipment: any = {};
let bestRuns: Record<string, BestRun> = {};
let error: string | null = null;
let debugInfo: string[] = [];

debugInfo.push(`Slug: ${slug}`);
debugInfo.push(`Parsed: region=${region}, realm=${realmSlug}, player=${playerName}`);

if (region && realmSlug && playerName) {
  debugInfo.push("Attempting to fetch player data");
  try {
    const staticPath = buildStaticPlayerProfilePath(region, realmSlug, playerName);
    const origin = Astro.url?.origin || Astro.site || "";
    debugInfo.push(`Fetching: ${origin}${staticPath}`);
    debugInfo.push(`Origin: ${origin}`);
    debugInfo.push(`Static path: ${staticPath}`);
    console.log(`[PlayerProfile] Fetching: ${origin}${staticPath}`);
    console.log(`[PlayerProfile] Origin: ${origin}`);
    console.log(`[PlayerProfile] Static path: ${staticPath}`);
    console.log(`[PlayerProfile] Region: ${region}, Realm: ${realmSlug}, Player: ${playerName}`);
    
    const response = await fetch(`${origin}${staticPath}`);
    debugInfo.push(`Response status: ${response.status}`);
    console.log(`[PlayerProfile] Response status: ${response.status}`);
    console.log(`[PlayerProfile] Response headers:`, Object.fromEntries(response.headers.entries()));

    if (response.ok) {
      const data = await response.json();
      debugInfo.push("Data loaded successfully");
      console.log(`[PlayerProfile] Data loaded successfully`);
      player = data.Player || data.player; // Handle both possible field names
      equipment = data.Equipment || data.equipment || {};
      bestRuns = data.BestRuns || data.bestRuns || {};
    } else if (response.status === 404) {
      debugInfo.push("Player not found (404)");
      console.log(`[PlayerProfile] Player not found (404) - this is expected for some players`);
      // Player not found - this is expected for players without complete coverage
      player = null;
      equipment = {};
      bestRuns = {};
    } else {
      const responseText = await response.text();
      debugInfo.push(`Player data not found (${response.status}): ${responseText.substring(0, 100)}`);
      console.warn(`[PlayerProfile] Player data not found (${response.status}):`, staticPath);
      console.warn(`[PlayerProfile] Response body:`, responseText);
      // Don't throw error - just leave data as null like leaderboard does
      player = null;
      equipment = {};
      bestRuns = {};
    }
  } catch (err) {
    debugInfo.push(`Fetch error: ${err}`);
    console.warn("Failed to fetch player data (gracefully handling):", err);
    // Don't set error - just leave data empty
    player = null;
    equipment = {};
    bestRuns = {};
  }
} else {
  debugInfo.push("Missing URL parameters");
}

const pageTitle = `${playerName} - ${realmSlug} | Player Profile`;
---

<html lang="en">
  <head>
    <meta charset="utf-8" />
    <link rel="icon" type="image/x-icon" href="/favicon.ico" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>{pageTitle}</title>
  </head>
  <body>
    <WoWClassColors />
    <Navigation />

    <div class="player-profile-container">
      <!-- Player Search Bar (scoped to profile container width) -->
      <div class="profile-search-section">
        <div class="search-container">
          <PlayerSearch />
        </div>
      </div>

      <div class="player-profile-page">
        {
          error && (
            <LoadingState
              type="error"
              message={`Error loading player profile: ${error}`}
            />
          )
        }

        {
          !player && !error && (
            <>
              <LoadingState
                type="error"
                message={`Player "${playerName}" not found. Only players with complete coverage (9/9 recorded dungeons) are included.`}
              />
              <div style="background: #333; color: #fff; padding: 10px; margin: 10px 0; font-family: monospace; font-size: 12px;">
                <strong>Debug Info:</strong><br/>
                {debugInfo.map(info => <div>{info}</div>)}
              </div>
            </>
          )
        }

        {
          player && !error && (
            <>
              <PlayerHeader player={player} />
              <PlayerEquipment equipment={equipment} />
              <BestRunsTable 
                bestRuns={bestRuns} 
                showSectionWrapper={true}
                playerRegion={player?.region}
                playerRealmSlug={player?.realm_slug}
              />
            </>
          )
        }
      </div>
    </div>
  </body>
</html>
<style>
  .player-profile-container {
    max-width: 1200px;
    margin: 0 auto;
    padding: 20px;
  }

  /* match card styling and spacing of other profile elements */
  .profile-search-section {
    background-color: var(--bg-secondary);
    border: 1px solid var(--border-color);
    border-radius: 8px;
    padding: 24px; /* match other card padding and ensure bottom padding */
    margin-bottom: 24px;
  }
</style>
