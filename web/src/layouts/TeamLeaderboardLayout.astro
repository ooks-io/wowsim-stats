---
import PageLayout from "../components/PageLayout.astro";
import ControlPanel from "../components/ControlPanel.astro";
import FormSelect from "../components/FormSelect.astro";
import LoadingState from "../components/LoadingState.astro";
import WoWClassColors from "../components/WoWClassColors.astro";
import "../styles/components.scss";

export interface Props {
  initialMode?: string;
}

const { initialMode = "players" } = Astro.props;
const baseUrl = import.meta.env.BASE_URL;
---

<PageLayout
  title="Team Leaderboards"
  description=""
  pageTitle="Team Leaderboards - MoP Classic"
>
  <WoWClassColors />

  <style>
    .leaderboard-container {
      overflow: hidden;
      margin-top: 20px;
    }

    .loading-overlay,
    .error-overlay {
      min-width: 300px;
    }

    #content {
      min-height: 400px;
      transition: opacity 0.2s ease;
    }

    .content-loading {
      opacity: 0.3;
      pointer-events: none;
    }

    .no-data-message {
      margin: 20px 0;
    }

    .no-data-content {
      text-align: center;
      padding: 40px 20px;
    }

    .no-data-content p {
      color: var(--text-secondary);
      margin: 0;
      font-size: 1.1em;
    }

    #team-rows {
      display: table;
      width: 100%;
      table-layout: fixed;
      border-spacing: 0;
      border-collapse: collapse;
    }

    @media (max-width: 1024px) {
      #team-rows .leaderboard-row {
        display: block !important;
        padding: 15px;
      }

      #team-rows .leaderboard-row > div {
        display: block;
        padding: 5px 0;
        text-align: center;
      }
    }

    /* Callout styles */
    .callout {
      background-color: #2a3a3a;
      border: 1px solid #458588;
      border-left: 4px solid #458588;
      border-radius: 6px;
      padding: 16px;
      margin-bottom: 20px;
    }

    .callout-content {
      color: var(--text-primary);
      line-height: 1.5;
      margin: 0;
    }
  </style>

  <style is:global>
    /* Global styles for dynamically generated team leaderboard content */
    #team-rows .leaderboard-row,
    #team-rows .chart-item-header {
      display: table-row !important;
      border-bottom: 1px solid #4a4a4a !important;
      background-color: #32302f !important;
      transition: background-color 0.2s ease !important;
    }

    #team-rows .leaderboard-row:hover,
    #team-rows .chart-item-header:hover {
      background-color: rgba(255, 215, 0, 0.05) !important;
    }

    /* Expandable chart item styles (copied from ChartLayout.astro) */
    .chart-item-wrapper {
      border-radius: 6px;
      transition: background-color 0.2s ease;
    }

    .chart-item-header {
      cursor: pointer;
      padding: 8px 12px;
      border-radius: 6px;
      transition: background-color 0.2s ease;
    }

    .chart-item-header:hover {
      background-color: rgba(255, 255, 255, 0.05);
    }

    .chart-item-expanded .chart-item-header {
      background-color: rgba(255, 255, 255, 0.08);
    }

    .chart-expand-icon {
      margin-left: 8px;
      font-size: 0.8em;
      color: var(--text-muted);
      transition: transform 0.2s ease;
      user-select: none;
    }

    .chart-item-expanded .chart-expand-icon {
      transform: rotate(90deg);
    }

    .chart-dropdown {
      margin-top: 12px;
      padding: 16px;
      background-color: var(--bg-selection);
      border-radius: 6px;
      border: 1px solid rgba(255, 255, 255, 0.1);
      display: none;
    }

    .chart-item-expanded .chart-dropdown {
      display: block;
      animation: dropdown-expand 0.2s ease-out;
    }

    @keyframes dropdown-expand {
      from {
        opacity: 0;
        transform: translateY(-8px);
      }
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  </style>

  <ControlPanel title="Leaderboard Options">
    <FormSelect
      id="leaderboard-mode"
      label="Leaderboard Mode"
      options={[
        {
          value: "teams",
          label: "Teams",
          selected: initialMode === "teams",
        },
        {
          value: "players",
          label: "Players",
          selected: initialMode === "players",
        },
      ]}
    />
  </ControlPanel>

  <div class="callout">
    <div class="callout-content">
      <p id="leaderboard-description">
        <strong>Team Leaderboards</strong> identify 3-player cores that have completed
        ALL 9 dungeons. Each team shows their core members plus extended roster.
        Rankings are based on the sum of their best times across all dungeons.
      </p>
    </div>
  </div>

  <div id="loading" class="loading-overlay hidden">
    <LoadingState message="Loading team leaderboard data..." />
  </div>

  <div id="error" class="error-overlay hidden">
    <LoadingState type="error" />
  </div>

  <div id="no-data" class="no-data-message hidden">
    <div class="card">
      <div class="no-data-content">
        <h3 class="section-title-large">No Teams Found</h3>
        <p>
          No team data was found. Please ensure the team leaderboard generator
          has been run.
        </p>
      </div>
    </div>
  </div>

  <div id="content" class="hidden">
    <div class="card">
      <div class="info-grid">
        <div class="info-item">
          <span class="info-label">Leaderboard</span>
          <span class="info-value" id="leaderboard-title">Loading...</span>
        </div>
        <div class="info-item">
          <span class="info-label">Generated</span>
          <span class="info-value" id="generated-time">-</span>
        </div>
      </div>
    </div>

    <div class="leaderboard-container card">
      <div id="team-rows"></div>
    </div>
  </div>
</PageLayout>

<script
  is:inline
  define:vars={{
    baseUrl,
    initialMode,
  }}
>
  function formatDuration(milliseconds) {
    const totalSeconds = Math.floor(milliseconds / 1000);
    const minutes = Math.floor(totalSeconds / 60);
    const seconds = totalSeconds % 60;
    const ms = milliseconds % 1000;
    return (
      minutes +
      ":" +
      seconds.toString().padStart(2, "0") +
      "." +
      ms.toString().padStart(3, "0")
    );
  }

  function formatTimestamp(timestamp) {
    return new Date(timestamp).toLocaleDateString("en-US", {
      month: "short",
      day: "numeric",
      hour: "2-digit",
      minute: "2-digit",
    });
  }

  // Global function for chart item expansion (similar to chart-logic.js)
  window.toggleChartItem = (element) => {
    const wrapper = element.closest(".chart-item-wrapper");
    if (!wrapper) return;

    const isExpanded = wrapper.classList.contains("chart-item-expanded");

    // Close all other expanded items
    document.querySelectorAll(".chart-item-expanded").forEach((item) => {
      if (item !== wrapper) {
        item.classList.remove("chart-item-expanded");
      }
    });

    // Toggle current item
    wrapper.classList.toggle("chart-item-expanded", !isExpanded);
  };

  function getSpecColor(specId) {
    // WoW class colors based on spec_id
    const specColors = {
      // Death Knight
      250: "#C41F3B",
      251: "#C41F3B",
      252: "#C41F3B",
      // Druid
      102: "#FF7D0A",
      103: "#FF7D0A",
      104: "#FF7D0A",
      105: "#FF7D0A",
      // Hunter
      253: "#ABD473",
      254: "#ABD473",
      255: "#ABD473",
      // Mage
      62: "#69CCF0",
      63: "#69CCF0",
      64: "#69CCF0",
      // Monk
      268: "#00FF96",
      269: "#00FF96",
      270: "#00FF96",
      // Paladin
      65: "#F58CBA",
      66: "#F58CBA",
      70: "#F58CBA",
      // Priest
      256: "#FFFFFF",
      257: "#FFFFFF",
      258: "#FFFFFF",
      // Rogue
      259: "#FFF569",
      260: "#FFF569",
      261: "#FFF569",
      // Shaman
      262: "#0070DE",
      263: "#0070DE",
      264: "#0070DE",
      // Warlock
      265: "#9482C9",
      266: "#9482C9",
      267: "#9482C9",
      // Warrior
      71: "#C79C6E",
      72: "#C79C6E",
      73: "#C79C6E",
    };
    return specColors[specId] || "#FFFFFF";
  }

  function createMemberLookup(team) {
    // Create a lookup map from member names to their full member data with spec_id
    const memberLookup = {};

    // Process all runs to build a comprehensive lookup
    team.all_runs.forEach((run) => {
      run.members.forEach((member) => {
        if (!memberLookup[member.name]) {
          memberLookup[member.name] = {
            name: member.name,
            realm_slug: member.realm_slug,
            spec_id: member.spec_id,
            id: member.id,
          };
        }
      });
    });

    return memberLookup;
  }

  function createTeamComposition(memberNames, memberLookup) {
    // Create styled team composition similar to Challenge Mode
    return memberNames
      .map((memberName) => {
        const member = memberLookup[memberName];
        if (!member) {
          // Fallback if member not found in lookup
          return `<span style="color: var(--text-primary); margin-right: 8px;">${memberName}</span>`;
        }

        const spec = member.spec_id
          ? window.WoW.getSpecInfo(member.spec_id)
          : null;
        const iconUrl = spec
          ? window.WoW.getSpecIcon(spec.class, spec.spec)
          : null;
        const classColor = spec
          ? window.WoW.getClassColor(spec.class)
          : "#FFFFFF";

        const iconHtml = iconUrl
          ? `<img src="${iconUrl}" alt="${spec.spec} ${spec.class}" style="width: 16px; height: 16px; border-radius: 2px; margin-right: 4px; vertical-align: middle; flex-shrink: 0;">`
          : "";

        return `<span style="display: inline-flex; align-items: center; margin-right: 8px; gap: 4px;">
        ${iconHtml}
        <span style="color: ${classColor}; font-weight: 600; font-size: 0.9em;">${member.name}@${member.realm_slug}</span>
      </span>`;
      })
      .join("");
  }

  function createTeamRow(team) {
    const wrapper = document.createElement("div");
    wrapper.className = "chart-item-wrapper";

    // Create extended roster display with spec colors
    const extendedRoster = team.extended_roster
      .map((member) => {
        const specColor = member.spec_id
          ? getSpecColor(member.spec_id)
          : "#FFFFFF";
        return `<span style="display: inline-flex; align-items: center; margin-right: 8px; gap: 4px;">
        <span style="color: ${specColor}; font-weight: 600; font-size: 0.9em;">${member.name}</span>
        <span style="color: var(--text-secondary); font-size: 0.8em;">@${member.realm_slug}</span>
      </span>`;
      })
      .join("");

    // Create the team details content
    const teamDetails = createTeamDetailsContent(team);

    wrapper.innerHTML = `
      <div class="leaderboard-row chart-item-header" onclick="toggleChartItem(this)" style="display: table-row !important; border-bottom: 1px solid #4a4a4a !important; background-color: #32302f; transition: background-color 0.2s ease; cursor: pointer; width: 100%;">
        <div style="display: table-cell; padding: 15px 10px; vertical-align: middle; font-size: 1.2em; font-weight: bold; color: #d8a657; text-align: center; width: 80px;">#${team.ranking}</div>
        <div style="display: table-cell; padding: 15px 10px; vertical-align: middle; font-family: 'Courier New', monospace; font-weight: bold; color: #ffffff; text-align: right; width: 120px;">${formatDuration(team.combined_best_time)}</div>
        <div style="display: table-cell; padding: 15px 10px; vertical-align: middle; display: flex; align-items: center; overflow: hidden;">
          <span class="chart-expand-icon" style="margin-right: 8px; flex-shrink: 0;">▶</span>
          <div style="display: flex; flex-wrap: wrap; align-items: center; overflow: hidden; min-width: 0;">${extendedRoster}</div>
        </div>
      </div>
      <div class="chart-dropdown">
        ${teamDetails}
      </div>
    `;

    return wrapper;
  }

  function createPlayerRow(player) {
    const wrapper = document.createElement("div");
    wrapper.className = "chart-item-wrapper";

    // Get player spec info for display
    const spec = player.main_spec_id
      ? window.WoW.getSpecInfo(player.main_spec_id)
      : null;
    const iconUrl = spec ? window.WoW.getSpecIcon(spec.class, spec.spec) : null;
    const classColor = spec ? window.WoW.getClassColor(spec.class) : "#FFFFFF";

    const iconHtml = iconUrl
      ? `<img src="${iconUrl}" alt="${spec.spec} ${spec.class}" style="width: 20px; height: 20px; border-radius: 2px; margin-right: 8px; vertical-align: middle; flex-shrink: 0;">`
      : "";

    // Create the player details content
    const playerDetails = createPlayerDetailsContent(player);

    wrapper.innerHTML = `
      <div class="leaderboard-row chart-item-header" onclick="toggleChartItem(this.parentElement)" style="display: table-row !important; border-bottom: 1px solid #4a4a4a !important; transition: background-color 0.2s ease !important; cursor: pointer;">
        <div style="display: table-cell; padding: 15px 10px; vertical-align: middle; font-size: 1.2em; font-weight: bold; color: #d8a657; text-align: center; width: 80px;">#${player.ranking}</div>
        <div style="display: table-cell; padding: 15px 10px; vertical-align: middle; font-family: 'Courier New', monospace; font-weight: bold; color: #ffffff; text-align: right; width: 120px; white-space: nowrap;">${formatDuration(player.combined_best_time)}</div>
        <div style="display: table-cell; padding: 15px 10px; vertical-align: middle; width: 100%;">
          <div style="display: flex; justify-content: space-between; align-items: center; width: 100%;">
            <div style="display: flex; align-items: center;">
              <span class="chart-expand-icon" style="margin-right: 8px;">▶</span>
              ${iconHtml}
              <span style="color: ${classColor}; font-weight: 600; font-size: 1.1em;">${player.name}</span>
            </div>
            <span style="color: var(--text-secondary); font-size: 0.9em;">@${player.realm_slug}</span>
          </div>
        </div>
      </div>
      <div class="chart-dropdown">
        ${playerDetails}
      </div>
    `;

    return wrapper;
  }

  function createPlayerDetailsContent(player) {
    // Create dungeon run entries styled like Challenge Mode leaderboard rows
    const dungeonEntries = Object.entries(player.best_runs_per_dungeon || {})
      .map(([_dungeonSlug, run]) => {
        // Create team composition with spec icons using all_members data
        const teamComposition = (run.all_members || [])
          .map((member) => {
            const spec = member.spec_id
              ? window.WoW.getSpecInfo(member.spec_id)
              : null;
            const iconUrl = spec
              ? window.WoW.getSpecIcon(spec.class, spec.spec)
              : null;
            const classColor = spec
              ? window.WoW.getClassColor(spec.class)
              : "#FFFFFF";

            const iconHtml = iconUrl
              ? `<img src="${iconUrl}" alt="${spec.spec} ${spec.class}" style="width: 16px; height: 16px; border-radius: 2px; margin-right: 4px; vertical-align: middle; flex-shrink: 0;">`
              : "";

            return `<span style="display: inline-flex; align-items: center; margin-right: 8px; gap: 4px;">
          ${iconHtml}
          <span style="color: ${classColor}; font-weight: 600; font-size: 0.9em;">${member.name}@${member.realm_slug}</span>
        </span>`;
          })
          .join("");

        return `
        <div style="display: grid; grid-template-columns: 80px 120px 2fr 100px 140px; gap: 20px; align-items: center; padding: 15px 20px; border-bottom: 1px solid #3a3a3a; min-height: 60px;">
          <div style="font-size: 1.2em; font-weight: bold; color: #d8a657; text-align: center;">${run.ranking === "~" ? "~" : "#" + run.ranking}</div>
          <div style="font-family: 'Courier New', monospace; font-weight: bold; color: #ffffff; text-align: right;">${formatDuration(run.duration)}</div>
          <div style="display: flex; flex-wrap: wrap; gap: 6px; justify-content: flex-start; align-items: center;">${teamComposition}</div>
          <div style="color: var(--text-primary); text-align: center; font-weight: 600;">${run.dungeon_name}</div>
          <div style="color: #aaaaaa; font-size: 0.9em; text-align: center;">${formatTimestamp(run.completed_timestamp)}</div>
        </div>
      `;
      })
      .join("");

    return `
      <div>
        <h4 style="color: var(--highlight-color); margin-bottom: 10px;">Best Times Per Dungeon</h4>
        <div style="border-radius: 6px; overflow: hidden; border: 1px solid #4a4a4a;">
          <div style="display: grid; grid-template-columns: 80px 120px 2fr 100px 140px; gap: 20px; padding: 15px 20px; background-color: rgba(255, 255, 255, 0.03); border-bottom: 1px solid #4a4a4a; font-weight: 600; color: var(--text-secondary); font-size: 0.9em; text-transform: uppercase; letter-spacing: 0.5px;">
            <div>Global Rank</div>
            <div style="text-align: right;">Time</div>
            <div>Team Composition</div>
            <div style="text-align: center;">Dungeon</div>
            <div style="text-align: center;">Date</div>
          </div>
          ${dungeonEntries}
        </div>
      </div>
    `;
  }

  function createTeamDetailsContent(team) {
    // Create member lookup for this team
    const memberLookup = createMemberLookup(team);

    // Create core members display with Challenge Mode styling
    const coreMembers = team.core_members
      .map((member) => {
        const spec = member.spec_id
          ? window.WoW.getSpecInfo(member.spec_id)
          : null;
        const iconUrl = spec
          ? window.WoW.getSpecIcon(spec.class, spec.spec)
          : null;
        const classColor = spec
          ? window.WoW.getClassColor(spec.class)
          : "#FFFFFF";

        const iconHtml = iconUrl
          ? `<img src="${iconUrl}" alt="${spec.spec} ${spec.class}" style="width: 16px; height: 16px; border-radius: 2px; margin-right: 4px; vertical-align: middle; flex-shrink: 0;">`
          : "";

        return `<span style="display: inline-flex; align-items: center; margin-right: 15px; gap: 4px;">
        ${iconHtml}
        <span style="color: ${classColor}; font-weight: 600; font-size: 0.9em;">${member.name}@${member.realm_slug}</span>
      </span>`;
      })
      .join("");

    // Create dungeon run entries styled like Challenge Mode leaderboard rows
    const dungeonEntries = Object.entries(team.best_runs_per_dungeon || {})
      .map(([_dungeonSlug, run]) => {
        const teamComposition = createTeamComposition(
          run.members,
          memberLookup,
        );

        return `
        <div style="display: grid; grid-template-columns: 80px 120px 2fr 100px 140px; gap: 20px; align-items: center; padding: 15px 20px; border-bottom: 1px solid #3a3a3a; min-height: 60px;">
          <div style="font-size: 1.2em; font-weight: bold; color: #d8a657; text-align: center;">#${run.ranking}</div>
          <div style="font-family: 'Courier New', monospace; font-weight: bold; color: #ffffff; text-align: right;">${formatDuration(run.duration)}</div>
          <div style="display: flex; flex-wrap: wrap; gap: 6px; justify-content: flex-start; align-items: center;">${teamComposition}</div>
          <div style="color: var(--text-primary); text-align: center; font-weight: 600;">${run.dungeon_name}</div>
          <div style="color: #aaaaaa; font-size: 0.9em; text-align: center;">${formatTimestamp(run.completed_timestamp)}</div>
        </div>
      `;
      })
      .join("");

    return `
      <div style="margin-bottom: 20px;">
        <h4 style="color: var(--highlight-color); margin-bottom: 10px;">Core Team (3-player consistent core)</h4>
        <div style="display: flex; flex-wrap: wrap; align-items: center;">${coreMembers}</div>
      </div>
      
      <div>
        <h4 style="color: var(--highlight-color); margin-bottom: 10px;">Best Times Per Dungeon</h4>
        <div style="border-radius: 6px; overflow: hidden; border: 1px solid #4a4a4a;">
          <div style="display: grid; grid-template-columns: 80px 120px 2fr 100px 140px; gap: 20px; padding: 15px 20px; background-color: rgba(255, 255, 255, 0.03); border-bottom: 1px solid #4a4a4a; font-weight: 600; color: var(--text-secondary); font-size: 0.9em; text-transform: uppercase; letter-spacing: 0.5px;">
            <div>Rank</div>
            <div style="text-align: right;">Time</div>
            <div>Team Composition</div>
            <div style="text-align: center;">Dungeon</div>
            <div style="text-align: center;">Date</div>
          </div>
          ${dungeonEntries}
        </div>
      </div>
    `;
  }

  function displayLeaderboard(data, mode) {
    console.log(`Displaying ${mode} leaderboard data:`, data);

    if (!data.leaderboard || data.leaderboard.length === 0) {
      showNoData();
      return;
    }

    document.getElementById("leaderboard-title").textContent = data.title;
    document.getElementById("generated-time").textContent =
      data.generated_timestamp
        ? formatTimestamp(data.generated_timestamp)
        : "Unknown";

    const rowsContainer = document.getElementById("team-rows");
    rowsContainer.innerHTML = "";

    data.leaderboard.forEach((item, index) => {
      // Add ranking based on position in sorted array
      item.ranking = index + 1;

      const wrapper =
        mode === "players" ? createPlayerRow(item) : createTeamRow(item);
      rowsContainer.appendChild(wrapper);
    });

    document.getElementById("loading").classList.add("hidden");
    document.getElementById("error").classList.add("hidden");
    document.getElementById("no-data").classList.add("hidden");
    document.getElementById("content").classList.remove("content-loading");
    document.getElementById("content").classList.remove("hidden");

    console.log(`${mode} leaderboard displayed successfully`);
  }

  function showNoData() {
    document.getElementById("loading").classList.add("hidden");
    document.getElementById("error").classList.add("hidden");
    document.getElementById("no-data").classList.remove("hidden");
    document.getElementById("content").classList.add("hidden");
  }

  function showError(message) {
    const errorDiv = document.getElementById("error");
    const loadingMessage = errorDiv.querySelector(".loading-message");
    if (loadingMessage) {
      loadingMessage.textContent = message;
    }
    errorDiv.classList.remove("hidden");
    document.getElementById("loading").classList.add("hidden");
    document.getElementById("no-data").classList.add("hidden");
    document.getElementById("content").classList.add("hidden");
  }

  function showLoading() {
    document.getElementById("loading").classList.remove("hidden");
    document.getElementById("error").classList.add("hidden");
    document.getElementById("no-data").classList.add("hidden");
    document.getElementById("content").classList.add("content-loading");
  }

  async function loadLeaderboard() {
    const mode = document.getElementById("leaderboard-mode").value;

    showLoading();

    try {
      const dataPath =
        mode === "players" ? "player-leaderboards" : "team-leaderboards";
      const fileName = "best-overall.json";
      const fullUrl = `/data/${dataPath}/${fileName}`;
      console.log(`Loading ${mode} leaderboard from:`, fullUrl);

      const response = await fetch(fullUrl);

      if (!response.ok) {
        throw new Error(
          `Failed to load ${mode} leaderboard data: ` + response.statusText,
        );
      }

      const data = await response.json();
      console.log(`${mode} leaderboard data loaded:`, data);
      displayLeaderboard(data, mode);

      // Update description based on mode
      updateDescription(mode);
    } catch (error) {
      console.error(`Error loading ${mode} leaderboard:`, error);
      showError(`Error loading ${mode} leaderboard data: ` + error.message);
    }
  }

  function updateDescription(mode) {
    const description = document.getElementById("leaderboard-description");
    if (mode === "players") {
      description.innerHTML =
        "<strong>Player Leaderboards</strong> identify individual players who have completed ALL 9 dungeons. Rankings are based on the sum of their best times across all dungeons.";
    } else {
      description.innerHTML =
        "<strong>Team Leaderboards</strong> identify 3-player cores that have completed ALL 9 dungeons. Each team shows their core members plus extended roster. Rankings are based on the sum of their best times across all dungeons.";
    }
  }

  function updateURL() {
    const mode = document.getElementById("leaderboard-mode").value;
    const newURL =
      mode === "players" ? `/player-leaderboards` : `/team-leaderboards`;
    window.history.pushState({}, "", newURL);
  }

  // Event listeners
  document.addEventListener("DOMContentLoaded", () => {
    // Set initial value if provided
    if (initialMode) {
      document.getElementById("leaderboard-mode").value = initialMode;
      loadLeaderboard();
    }

    // Bind change event
    document
      .getElementById("leaderboard-mode")
      .addEventListener("change", () => {
        console.log(
          "Leaderboard mode changed to:",
          document.getElementById("leaderboard-mode").value,
        );
        updateURL();
        loadLeaderboard();
      });
  });
</script>
