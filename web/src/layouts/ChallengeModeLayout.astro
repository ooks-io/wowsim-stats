---
import PageLayout from "../components/PageLayout.astro";
import LeaderboardControls from "../components/LeaderboardControls.astro";
import DungeonLeaderboard from "../components/DungeonLeaderboard.astro";
import TeamPlayerLeaderboard from "../components/TeamPlayerLeaderboard.astro";
import LeaderboardInfoGrid from "../components/LeaderboardInfoGrid.astro";
import LoadingState from "../components/LoadingState.astro";
import WoWClassColors from "../components/WoWClassColors.astro";
import { DATA_MAP } from "../data/realms.js";
import "../styles/components.scss";
import "../styles/leaderboard.scss";

export interface Props {
  initialLeaderboardType?: string;
  initialRegion?: string;
  initialRealm?: string;
  initialDungeon?: string;
}

const {
  initialLeaderboardType = "dungeon",
  initialRegion = "",
  initialRealm = "",
  initialDungeon = "",
} = Astro.props;
const baseUrl = import.meta.env.BASE_URL;
---

<PageLayout
  title="Challenge Mode Leaderboards"
  description=""
  pageTitle="Challenge Mode Leaderboards - MoP Classic"
>
  <WoWClassColors />

  <style>
    .loading-overlay,
    .error-overlay {
      min-width: 300px;
    }

    @media (max-width: 768px) {
      .container {
        padding: 10px;
      }

      .controls-grid {
        flex-direction: column;
      }
    }
  </style>

  <LeaderboardControls
    initialLeaderboardType={initialLeaderboardType}
    initialRegion={initialRegion}
    initialDungeon={initialDungeon}
  />

  <div id="teams-callout" class="callout" style="display: none;">
    <div class="callout-content">
      <p><strong>Team Leaderboards (Work in Progress)</strong></p>
      <p>
        Team rankings attempt to rank teams by identifying 3 core players and
        building an extended roster from that. Rankings are based on the sum of
        their best times across all dungeons.
      </p>
      <p>
        <em
          >This feature is still being actively developed, teams, particularly
          ones with large overlapping rosters are still being identified
          incorrectly.
        </em>
      </p>
    </div>
  </div>

  <div id="loading" class="loading-overlay hidden">
    <LoadingState message="Loading Challenge Mode leaderboard data..." />
  </div>

  <div id="error" class="error-overlay hidden">
    <LoadingState type="error" />
  </div>

  <div id="no-data" class="no-data-message hidden">
    <div class="card">
      <div class="no-data-content">
        <h3 class="section-title-large">No Times Found</h3>
        <p>
          No Challenge Mode times were found for this realm and dungeon
          combination.
        </p>
      </div>
    </div>
  </div>

  <div id="content" class="hidden">
    <LeaderboardInfoGrid />
    <DungeonLeaderboard />
    <TeamPlayerLeaderboard />
  </div>
</PageLayout>

<script
  type="module"
  is:inline
  define:vars={{
    baseUrl,
    initialLeaderboardType,
    initialRegion,
    initialRealm,
    initialDungeon,
    DATA_MAP,
  }}
>
  import {
    loadLeaderboard,
    loadTeamPlayerLeaderboard,
    updateURL,
    updateLeaderboardURL,
    updateRealmOptions,
    canLoadLeaderboard,
  } from "/scripts/leaderboard-api.js";

  import {
    displayLeaderboard,
    displayTeamPlayerLeaderboard,
    refreshLeaderboardDisplay,
    showLoading,
    showError,
  } from "/scripts/leaderboard-display.js";

  import "/scripts/leaderboard-utils.js";

  const dungeonNames = {
    2: "Temple of the Jade Serpent",
    56: "Stormstout Brewery",
    57: "Gate of the Setting Sun",
    58: "Shado-Pan Monastery",
    59: "Siege of Niuzao Temple",
    60: "Mogu'shan Palace",
    76: "Scholomance",
    77: "Scarlet Halls",
    78: "Scarlet Monastery",
  };

  async function loadLeaderboardData() {
    if (!canLoadLeaderboard()) {
      console.log("Cannot load leaderboard - missing selections");
      return;
    }

    showLoading();

    try {
      const data = await loadLeaderboard(dungeonNames);
      displayLeaderboard(data, DATA_MAP);
    } catch (error) {
      console.error("Error loading leaderboard:", error);
      showError("Error loading leaderboard data: " + error.message);
    }
  }

  document.addEventListener("DOMContentLoaded", () => {
    updateRealmOptions(DATA_MAP);
    if (initialRegion) {
      document.getElementById("region").value = initialRegion;
      updateRealmOptions(DATA_MAP);
      if (initialRealm) {
        document.getElementById("realm").value = initialRealm;
      }
      if (initialDungeon) {
        document.getElementById("dungeon").value = initialDungeon;
      }
      if (canLoadLeaderboard()) {
        loadLeaderboardData();
      }
    }
    document.getElementById("region").addEventListener("change", () => {
      console.log(
        "Region changed to:",
        document.getElementById("region").value,
      );
      updateRealmOptions(DATA_MAP);
      document.getElementById("realm").value = "";
      document.getElementById("realm").disabled = false;
      updateURL(dungeonNames);
      loadLeaderboardData();
    });
    document.getElementById("realm").addEventListener("change", () => {
      console.log("Realm changed to:", document.getElementById("realm").value);
      updateURL(dungeonNames);
      loadLeaderboardData();
    });
    document.getElementById("dungeon").addEventListener("change", () => {
      console.log(
        "Dungeon changed to:",
        document.getElementById("dungeon").value,
      );
      updateURL(dungeonNames);
      loadLeaderboardData();
    });

    document.getElementById("team-filter").addEventListener("change", () => {
      console.log(
        "Team filter changed to:",
        document.getElementById("team-filter").checked,
      );
      refreshLeaderboardDisplay();
    });

    document
      .getElementById("leaderboard-type")
      .addEventListener("change", () => {
        const leaderboardType =
          document.getElementById("leaderboard-type").value;
        console.log("Leaderboard type changed to:", leaderboardType);
        handleLeaderboardTypeChange(leaderboardType);
      });

    if (initialLeaderboardType) {
      document.getElementById("leaderboard-type").value =
        initialLeaderboardType;
      handleLeaderboardTypeChange(initialLeaderboardType);
    }
  });

  function handleLeaderboardTypeChange(leaderboardType) {
    const dungeonSelectors = document.getElementById("dungeon-selectors");
    const dungeonLeaderboard = document.getElementById("dungeon-leaderboard");
    const teamPlayerLeaderboard = document.getElementById(
      "team-player-leaderboard",
    );
    const teamsCallout = document.getElementById("teams-callout");

    updateLeaderboardURL(leaderboardType);
    if (leaderboardType === "teams") {
      teamsCallout.style.display = "block";
    } else {
      teamsCallout.style.display = "none";
    }

    if (leaderboardType === "dungeon") {
      dungeonSelectors.style.display = "block";
      dungeonLeaderboard.style.display = "block";
      teamPlayerLeaderboard.style.display = "none";
      if (canLoadLeaderboard()) {
        loadLeaderboardData();
      }
    } else {
      dungeonSelectors.style.display = "none";
      dungeonLeaderboard.style.display = "none";
      teamPlayerLeaderboard.style.display = "block";

      loadTeamPlayerData(leaderboardType);
    }
  }

  async function loadTeamPlayerData(mode) {
    showLoading();

    try {
      const data = await loadTeamPlayerLeaderboard(mode, baseUrl);
      displayTeamPlayerLeaderboard(data, mode);
    } catch (error) {
      console.error(`Error loading ${mode} leaderboard:`, error);
      showError(`Error loading ${mode} leaderboard data: ` + error.message);
    }
  }
</script>
